#!/usr/bin/python3

import json
import os
import re
import argparse
import subprocess
import sys

NVIDIA_ENV = {
    "__NV_PRIME_RENDER_OFFLOAD": 1,
    "__GLX_VENDOR_LIBRARY_NAME": "nvidia",
    "__VK_LAYER_NV_optimus": "NVIDIA_only",
}

def get_gpus() -> dict:
    """
    Get GPU data including:
    shortened PCI number,
    GPU name,
    and environment variables to use the GPU.
    """
    lspci = os.popen("lspci | grep VGA").read()
    gpus = {}

    for gpu in lspci.splitlines():
        split = gpu.split(" VGA compatible controller: ")
        pci = f"pci-0000_{split[0]}"\
            .replace(":", "_")\
            .replace(".", "_")
        pci_num = int(re.sub(r"[^0-9]+", "", pci))

        gpus[pci_num] = {}
        gpus[pci_num]["gpu"] = split[1]
        gpus[pci_num]["env"] = {"DRI_PRIME": pci}
        if "nvidia" in split[1].lower():
            gpus[pci_num]["env"].update(NVIDIA_ENV)

    return gpus


def main() -> None:
    # Parse arugments
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--gpu", "-g",
        help="Select a GPU to use"
    )
    parser.add_argument(
        "--list", "-l",
        help="List available GPUs",
        const=True,
        action="store_const"
    )
    parser.add_argument(
        "--json", "-j",
        help="List all data in json format",
        const=True,
        action="store_const"
    )
    args, nonargs = parser.parse_known_args()
    nargs = sum([1 for a in vars(args).values() if a is not None])

    # Handle arguments
    if nargs != 0:
        gpus = get_gpus()

        # List GPUs with shortened PCI ID and name
        if args.list:
            [print(f"{k:6}: {v['gpu']}") for k, v in gpus.items()]
            return

        # List GPU data in JSON format
        if args.json:
            print(json.dumps(gpus, indent=4))
            return

        # Sets environment variables for the specified GPU
        if args.gpu:
            if int(args.gpu) not in gpus:
                print("Invalid GPU ID, use --list to list GPUs.")
            for k, v in gpus[int(args.gpu)]["env"].items():
                os.environ[k] = str(v)

    # Run remaining arguments as a command
    if nonargs:
        subprocess.call(nonargs)


if __name__ == "__main__":
    main()
